2024-10-10 10:59:46,227 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 10:59:46,227 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 10:59:46,228 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 10:59:46,253 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
)
2024-10-10 11:01:36,029 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 11:01:36,030 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 11:01:36,032 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 11:01:36,063 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
)
2024-10-10 11:02:22,886 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 11:02:22,887 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 11:02:22,888 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 11:02:22,911 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
)
2024-10-10 11:03:10,531 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 11:03:10,532 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 11:03:10,533 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 11:03:10,557 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
)
2024-10-10 11:06:19,371 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 11:06:19,372 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 11:06:19,374 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 11:06:19,405 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
)
2024-10-10 12:32:18,992 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 12:32:18,993 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 12:32:18,994 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 12:32:19,025 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
)
2024-10-10 12:42:57,454 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 12:42:57,454 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 12:42:57,455 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 12:42:57,478 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
)
2024-10-10 12:44:42,657 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 12:44:42,657 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 12:44:42,658 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 12:44:42,682 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
)
2024-10-10 12:50:01,846 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 12:50:01,847 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 12:50:01,848 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 12:50:01,871 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
)
2024-10-10 15:09:46,462 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 15:09:46,462 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 15:09:46,463 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 15:09:46,486 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
)
2024-10-10 15:45:52,231 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 15:45:52,232 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 15:45:52,233 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 15:45:52,256 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 15:46:37,771 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 15:46:37,772 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 15:46:37,773 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 15:46:37,805 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 15:48:26,590 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 15:48:26,590 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 15:48:26,592 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 15:48:26,623 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 15:49:09,431 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 15:49:09,432 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 15:49:09,433 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 15:49:09,460 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 15:50:59,923 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 15:50:59,924 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 15:50:59,925 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 15:50:59,954 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 15:51:17,317 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 15:51:17,317 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 15:51:17,318 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 15:51:17,345 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 15:53:53,121 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 15:53:53,121 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 15:53:53,122 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 15:53:53,150 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 15:59:05,927 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 15:59:05,928 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 15:59:05,928 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 15:59:05,963 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 15:59:36,155 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 15:59:36,155 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 15:59:36,157 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 15:59:36,186 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 16:02:21,915 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 16:02:21,916 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 16:02:21,917 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 16:02:21,943 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 16:04:09,876 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 16:04:09,876 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 16:04:09,878 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 16:04:09,903 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 16:08:34,913 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 16:08:34,914 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 16:08:34,915 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 16:08:34,940 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 16:08:50,007 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 16:08:50,007 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 16:08:50,008 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 16:08:50,035 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 16:50:25,615 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 16:50:25,615 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 16:50:25,616 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 16:50:25,652 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 16:53:21,251 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 16:53:21,251 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 16:53:21,252 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 16:53:21,307 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 16:59:34,489 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 16:59:34,490 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 16:59:34,491 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 16:59:34,534 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 17:27:54,424 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 17:27:54,425 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 17:27:54,426 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 17:27:54,483 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 19:47:21,111 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 19:47:21,111 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 19:47:21,113 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 19:47:21,152 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 19:50:12,239 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 19:50:12,240 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 19:50:12,241 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 19:50:12,281 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 19:54:09,868 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 19:54:09,868 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 19:54:09,870 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 19:54:09,898 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 19:56:16,090 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 19:56:16,090 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 19:56:16,091 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 19:56:16,134 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 19:59:35,224 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 19:59:35,224 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 19:59:35,225 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 19:59:35,278 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:05:30,664 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:05:30,664 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:05:30,665 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:05:30,722 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:12:31,728 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:12:31,730 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:12:31,733 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:12:31,774 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:15:04,490 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:15:04,491 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:15:04,492 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:15:04,578 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:16:22,315 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:16:22,316 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:16:22,317 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:16:22,391 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:19:28,755 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:19:28,756 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:19:28,757 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:19:28,810 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:20:57,263 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:20:57,264 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:20:57,265 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:20:57,334 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:22:02,543 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:22:02,543 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:22:02,544 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:22:02,590 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:23:07,335 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:23:07,335 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:23:07,337 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:23:07,402 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:25:03,050 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:25:03,051 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:25:03,052 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:25:03,121 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:25:43,591 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:25:43,591 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:25:43,593 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:25:43,667 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:26:36,524 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:26:36,524 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:26:36,525 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:26:36,555 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:27:46,439 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:27:46,440 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:27:46,441 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:27:46,469 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:31:41,020 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:31:41,020 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:31:41,022 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:31:41,076 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:36:10,787 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:36:10,788 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:36:10,789 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:36:10,824 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:44:16,147 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:44:16,147 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:44:16,149 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:44:16,189 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:44:56,791 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:44:56,791 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:44:56,793 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:44:56,836 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:47:38,379 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:47:38,379 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:47:38,380 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:47:38,455 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:49:05,082 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:49:05,093 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:49:05,095 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:49:05,145 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:50:45,347 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:50:45,348 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:50:45,349 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:50:45,391 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:51:34,255 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:51:34,255 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:51:34,257 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:51:34,288 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:06:28,727 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:06:28,728 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:06:28,729 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:06:28,758 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:10:26,248 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:10:26,249 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:10:26,250 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:10:26,283 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:12:47,885 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:12:47,886 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:12:47,887 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:12:47,922 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:13:51,707 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:13:51,708 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:13:51,709 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:13:51,742 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:16:09,087 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:16:09,087 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:16:09,089 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:16:09,113 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:16:46,527 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:16:46,528 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:16:46,529 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:16:46,566 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:18:40,091 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:18:40,092 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:18:40,093 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:18:40,123 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:23:35,595 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:23:35,596 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:23:35,597 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:23:35,623 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:24:25,835 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:24:25,835 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:24:25,837 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:24:25,860 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:25:24,191 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:25:24,191 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:25:24,193 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:25:24,229 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:25:53,699 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:25:53,699 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:25:53,700 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:25:53,726 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:28:21,358 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:28:21,358 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:28:21,360 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:28:21,397 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:29:02,446 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:29:02,446 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:29:02,447 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:29:02,477 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:31:45,944 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:31:45,944 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:31:45,945 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:31:45,980 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:34:34,115 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:34:34,116 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:34:34,117 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:34:34,142 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:35:03,811 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:35:03,812 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:35:03,813 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:35:03,837 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:37:56,769 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:37:56,769 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:37:56,770 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:37:56,840 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:38:42,405 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:38:42,406 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:38:42,406 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:38:42,466 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:39:32,058 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:39:32,058 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:39:32,059 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:39:32,108 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:40:24,126 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:40:24,127 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:40:24,128 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:40:24,177 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:40:26,955 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:40:27,820 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:40:28,688 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:40:29,429 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:40:30,173 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:40:30,998 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:40:31,775 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:40:32,511 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:40:33,030 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:40:33,031 - root - INFO - epoch: 0, loss_pool: nan
2024-10-10 21:40:33,032 - tensorboardX.x2num - WARNING - NaN or Inf found in input tensor.
2024-10-10 21:40:34,138 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:41:34,219 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:41:34,220 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:41:34,221 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:41:34,260 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:41:36,654 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:41:37,486 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:41:38,347 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:41:39,143 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:41:39,986 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:41:40,894 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:41:41,763 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:41:42,597 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:41:43,253 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:41:43,255 - root - INFO - epoch: 0, loss_pool: nan
2024-10-10 21:41:43,256 - tensorboardX.x2num - WARNING - NaN or Inf found in input tensor.
2024-10-10 21:41:43,295 - root - INFO - save parameters to file: experiments/swat_test/epoch_0.params
2024-10-10 21:41:44,274 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:42:53,510 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:42:53,510 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:42:53,511 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:42:53,583 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:42:56,823 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:42:57,921 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:42:58,896 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:42:59,762 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:43:00,686 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:43:01,538 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:43:02,410 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:43:03,373 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:43:03,990 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:43:03,992 - root - INFO - epoch: 0, loss_pool: nan
2024-10-10 21:43:03,993 - tensorboardX.x2num - WARNING - NaN or Inf found in input tensor.
2024-10-10 21:43:04,008 - root - INFO - save parameters to file: experiments/swat_test/epoch_0.params
2024-10-10 21:43:05,159 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:46:11,443 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:46:11,443 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:46:11,444 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:46:11,499 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:46:14,189 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:47:46,400 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:47:46,400 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:47:46,421 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:47:46,475 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 10:31:16,092 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 10:31:16,093 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 10:31:16,094 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 10:31:16,117 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:15:37,449 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:15:37,450 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:15:37,451 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:15:37,471 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:16:24,870 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:16:24,870 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:16:24,871 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:16:24,894 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:25:54,825 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:25:54,826 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:25:54,827 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:25:54,850 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:27:39,969 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:27:39,970 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:27:39,971 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:27:39,994 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:31:39,865 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:31:39,865 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:31:39,866 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:31:39,888 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:32:41,529 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:32:41,529 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:32:41,530 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:32:41,553 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:33:18,048 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:33:18,048 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:33:18,049 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:33:18,072 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:34:06,242 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:34:06,242 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:34:06,244 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:34:06,267 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:39:44,966 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:39:44,966 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:39:44,967 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:39:44,991 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:41:24,795 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:41:24,796 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:41:24,797 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:41:24,824 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:41:46,240 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:41:46,241 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:41:46,242 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:41:46,266 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:44:29,783 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:44:29,783 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:44:29,785 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:44:29,810 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:46:26,403 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:46:26,403 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:46:26,404 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:46:26,429 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:47:29,495 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:47:29,495 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:47:29,496 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:47:29,519 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:47:51,083 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:47:51,083 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:47:51,084 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:47:51,111 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:49:22,882 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:49:22,883 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:49:22,883 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:49:22,911 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:50:05,410 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:50:05,411 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:50:05,412 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:50:05,435 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:51:11,490 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:51:11,490 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:51:11,491 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:51:11,517 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:51:47,097 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:51:47,097 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:51:47,098 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:51:47,121 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:52:08,542 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:52:08,543 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:52:08,544 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:52:08,565 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:53:07,494 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:53:07,495 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:53:07,496 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:53:07,519 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:57:06,669 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:57:06,670 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:57:06,671 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:57:06,694 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
