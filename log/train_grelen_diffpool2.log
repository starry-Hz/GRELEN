2024-10-10 10:59:46,227 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 10:59:46,227 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 10:59:46,228 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 10:59:46,253 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
)
2024-10-10 11:01:36,029 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 11:01:36,030 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 11:01:36,032 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 11:01:36,063 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
)
2024-10-10 11:02:22,886 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 11:02:22,887 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 11:02:22,888 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 11:02:22,911 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
)
2024-10-10 11:03:10,531 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 11:03:10,532 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 11:03:10,533 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 11:03:10,557 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
)
2024-10-10 11:06:19,371 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 11:06:19,372 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 11:06:19,374 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 11:06:19,405 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
)
2024-10-10 12:32:18,992 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 12:32:18,993 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 12:32:18,994 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 12:32:19,025 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
)
2024-10-10 12:42:57,454 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 12:42:57,454 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 12:42:57,455 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 12:42:57,478 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
)
2024-10-10 12:44:42,657 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 12:44:42,657 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 12:44:42,658 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 12:44:42,682 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
)
2024-10-10 12:50:01,846 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 12:50:01,847 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 12:50:01,848 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 12:50:01,871 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
)
2024-10-10 15:09:46,462 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 15:09:46,462 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 15:09:46,463 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 15:09:46,486 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
)
2024-10-10 15:45:52,231 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 15:45:52,232 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 15:45:52,233 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 15:45:52,256 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 15:46:37,771 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 15:46:37,772 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 15:46:37,773 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 15:46:37,805 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 15:48:26,590 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 15:48:26,590 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 15:48:26,592 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 15:48:26,623 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 15:49:09,431 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 15:49:09,432 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 15:49:09,433 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 15:49:09,460 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 15:50:59,923 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 15:50:59,924 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 15:50:59,925 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 15:50:59,954 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 15:51:17,317 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 15:51:17,317 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 15:51:17,318 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 15:51:17,345 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 15:53:53,121 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 15:53:53,121 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 15:53:53,122 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 15:53:53,150 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 15:59:05,927 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 15:59:05,928 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 15:59:05,928 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 15:59:05,963 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 15:59:36,155 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 15:59:36,155 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 15:59:36,157 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 15:59:36,186 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 16:02:21,915 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 16:02:21,916 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 16:02:21,917 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 16:02:21,943 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 16:04:09,876 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 16:04:09,876 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 16:04:09,878 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 16:04:09,903 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 16:08:34,913 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 16:08:34,914 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 16:08:34,915 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 16:08:34,940 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 16:08:50,007 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 16:08:50,007 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 16:08:50,008 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 16:08:50,035 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 16:50:25,615 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 16:50:25,615 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 16:50:25,616 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 16:50:25,652 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 16:53:21,251 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 16:53:21,251 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 16:53:21,252 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 16:53:21,307 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 16:59:34,489 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 16:59:34,490 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 16:59:34,491 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 16:59:34,534 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 17:27:54,424 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 17:27:54,425 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 17:27:54,426 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 17:27:54,483 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 19:47:21,111 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 19:47:21,111 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 19:47:21,113 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 19:47:21,152 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 19:50:12,239 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 19:50:12,240 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 19:50:12,241 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 19:50:12,281 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 19:54:09,868 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 19:54:09,868 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 19:54:09,870 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 19:54:09,898 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 19:56:16,090 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 19:56:16,090 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 19:56:16,091 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 19:56:16,134 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 19:59:35,224 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 19:59:35,224 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 19:59:35,225 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 19:59:35,278 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:05:30,664 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:05:30,664 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:05:30,665 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:05:30,722 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:12:31,728 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:12:31,730 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:12:31,733 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:12:31,774 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:15:04,490 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:15:04,491 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:15:04,492 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:15:04,578 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:16:22,315 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:16:22,316 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:16:22,317 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:16:22,391 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:19:28,755 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:19:28,756 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:19:28,757 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:19:28,810 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:20:57,263 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:20:57,264 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:20:57,265 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:20:57,334 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:22:02,543 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:22:02,543 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:22:02,544 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:22:02,590 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:23:07,335 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:23:07,335 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:23:07,337 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:23:07,402 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:25:03,050 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:25:03,051 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:25:03,052 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:25:03,121 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:25:43,591 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:25:43,591 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:25:43,593 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:25:43,667 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:26:36,524 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:26:36,524 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:26:36,525 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:26:36,555 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:27:46,439 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:27:46,440 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:27:46,441 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:27:46,469 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:31:41,020 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:31:41,020 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:31:41,022 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:31:41,076 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:36:10,787 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:36:10,788 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:36:10,789 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:36:10,824 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:44:16,147 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:44:16,147 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:44:16,149 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:44:16,189 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:44:56,791 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:44:56,791 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:44:56,793 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:44:56,836 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:47:38,379 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:47:38,379 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:47:38,380 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:47:38,455 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:49:05,082 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:49:05,093 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:49:05,095 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:49:05,145 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:50:45,347 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:50:45,348 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:50:45,349 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:50:45,391 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 20:51:34,255 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 20:51:34,255 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 20:51:34,257 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 20:51:34,288 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:06:28,727 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:06:28,728 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:06:28,729 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:06:28,758 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:10:26,248 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:10:26,249 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:10:26,250 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:10:26,283 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:12:47,885 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:12:47,886 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:12:47,887 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:12:47,922 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:13:51,707 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:13:51,708 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:13:51,709 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:13:51,742 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:16:09,087 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:16:09,087 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:16:09,089 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:16:09,113 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:16:46,527 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:16:46,528 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:16:46,529 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:16:46,566 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:18:40,091 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:18:40,092 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:18:40,093 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:18:40,123 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:23:35,595 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:23:35,596 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:23:35,597 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:23:35,623 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:24:25,835 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:24:25,835 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:24:25,837 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:24:25,860 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:25:24,191 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:25:24,191 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:25:24,193 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:25:24,229 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:25:53,699 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:25:53,699 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:25:53,700 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:25:53,726 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:28:21,358 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:28:21,358 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:28:21,360 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:28:21,397 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:29:02,446 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:29:02,446 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:29:02,447 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:29:02,477 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:31:45,944 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:31:45,944 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:31:45,945 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:31:45,980 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:34:34,115 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:34:34,116 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:34:34,117 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:34:34,142 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:35:03,811 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:35:03,812 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:35:03,813 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:35:03,837 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:37:56,769 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:37:56,769 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:37:56,770 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:37:56,840 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:38:42,405 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:38:42,406 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:38:42,406 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:38:42,466 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:39:32,058 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:39:32,058 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:39:32,059 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:39:32,108 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:40:24,126 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:40:24,127 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:40:24,128 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:40:24,177 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:40:26,955 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:40:27,820 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:40:28,688 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:40:29,429 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:40:30,173 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:40:30,998 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:40:31,775 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:40:32,511 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:40:33,030 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:40:33,031 - root - INFO - epoch: 0, loss_pool: nan
2024-10-10 21:40:33,032 - tensorboardX.x2num - WARNING - NaN or Inf found in input tensor.
2024-10-10 21:40:34,138 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:41:34,219 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:41:34,220 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:41:34,221 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:41:34,260 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:41:36,654 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:41:37,486 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:41:38,347 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:41:39,143 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:41:39,986 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:41:40,894 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:41:41,763 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:41:42,597 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:41:43,253 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:41:43,255 - root - INFO - epoch: 0, loss_pool: nan
2024-10-10 21:41:43,256 - tensorboardX.x2num - WARNING - NaN or Inf found in input tensor.
2024-10-10 21:41:43,295 - root - INFO - save parameters to file: experiments/swat_test/epoch_0.params
2024-10-10 21:41:44,274 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:42:53,510 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:42:53,510 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:42:53,511 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:42:53,583 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:42:56,823 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:42:57,921 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:42:58,896 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:42:59,762 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:43:00,686 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:43:01,538 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:43:02,410 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:43:03,373 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:43:03,990 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:43:03,992 - root - INFO - epoch: 0, loss_pool: nan
2024-10-10 21:43:03,993 - tensorboardX.x2num - WARNING - NaN or Inf found in input tensor.
2024-10-10 21:43:04,008 - root - INFO - save parameters to file: experiments/swat_test/epoch_0.params
2024-10-10 21:43:05,159 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:46:11,443 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:46:11,443 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:46:11,444 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:46:11,499 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-10 21:46:14,189 - root - INFO - Warning: calculating link pred loss without masking
2024-10-10 21:47:46,400 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-10 21:47:46,400 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-10 21:47:46,421 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-10 21:47:46,475 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 10:31:16,092 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 10:31:16,093 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 10:31:16,094 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 10:31:16,117 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:15:37,449 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:15:37,450 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:15:37,451 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:15:37,471 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:16:24,870 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:16:24,870 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:16:24,871 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:16:24,894 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:25:54,825 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:25:54,826 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:25:54,827 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:25:54,850 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:27:39,969 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:27:39,970 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:27:39,971 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:27:39,994 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:31:39,865 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:31:39,865 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:31:39,866 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:31:39,888 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:32:41,529 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:32:41,529 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:32:41,530 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:32:41,553 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:33:18,048 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:33:18,048 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:33:18,049 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:33:18,072 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:34:06,242 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:34:06,242 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:34:06,244 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:34:06,267 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:39:44,966 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:39:44,966 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:39:44,967 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:39:44,991 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:41:24,795 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:41:24,796 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:41:24,797 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:41:24,824 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:41:46,240 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:41:46,241 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:41:46,242 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:41:46,266 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:44:29,783 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:44:29,783 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:44:29,785 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:44:29,810 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:46:26,403 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:46:26,403 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:46:26,404 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:46:26,429 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:47:29,495 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:47:29,495 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:47:29,496 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:47:29,519 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:47:51,083 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:47:51,083 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:47:51,084 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:47:51,111 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:49:22,882 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:49:22,883 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:49:22,883 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:49:22,911 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:50:05,410 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:50:05,411 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:50:05,412 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:50:05,435 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:51:11,490 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:51:11,490 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:51:11,491 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:51:11,517 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:51:47,097 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:51:47,097 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:51:47,098 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:51:47,121 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:52:08,542 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:52:08,543 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:52:08,544 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:52:08,565 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:53:07,494 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:53:07,495 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:53:07,496 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:53:07,519 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-11 11:57:06,669 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-11 11:57:06,670 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-11 11:57:06,671 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-11 11:57:06,694 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 15:34:56,901 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 15:34:56,902 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 15:34:56,903 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 15:34:56,930 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 15:45:19,663 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 15:45:19,663 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 15:45:19,664 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 15:45:19,688 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 15:47:12,663 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 15:47:12,663 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 15:47:12,664 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 15:47:12,687 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 15:47:18,072 - root - INFO - epoch: 0, loss_pool: 67.80
2024-10-14 15:47:18,085 - root - INFO - save parameters to file: experiments/swat_test/epoch_0.params
2024-10-14 15:56:54,807 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 15:56:54,807 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 15:56:54,808 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 15:56:54,831 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 15:57:00,305 - root - INFO - epoch: 0, loss_pool: 66.52
2024-10-14 15:57:00,317 - root - INFO - save parameters to file: experiments/swat_test/epoch_0.params
2024-10-14 15:58:01,893 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 15:58:01,893 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 15:58:01,894 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 15:58:01,917 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 15:58:07,397 - root - INFO - epoch: 0, loss_pool: 67.14
2024-10-14 15:58:07,410 - root - INFO - save parameters to file: experiments/swat_test/epoch_0.params
2024-10-14 16:00:01,697 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 16:00:01,697 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 16:00:01,698 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 16:00:01,722 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 16:00:07,159 - root - INFO - epoch: 0, loss_pool: 67.07
2024-10-14 16:00:07,171 - root - INFO - save parameters to file: experiments/swat_test/epoch_0.params
2024-10-14 16:00:40,092 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 16:00:40,092 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 16:00:40,093 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 16:00:40,116 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 16:00:45,559 - root - INFO - epoch: 0, loss_pool: 66.81
2024-10-14 16:00:45,572 - root - INFO - save parameters to file: experiments/swat_test/epoch_0.params
2024-10-14 16:01:11,889 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 16:01:11,889 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 16:01:11,891 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 16:01:11,913 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 16:01:17,307 - root - INFO - epoch: 0, loss_pool: 68.55
2024-10-14 16:01:17,320 - root - INFO - save parameters to file: experiments/swat_test/epoch_0.params
2024-10-14 16:02:13,156 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 16:02:13,156 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 16:02:13,157 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 16:02:13,180 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 16:02:18,636 - root - INFO - epoch: 0, loss_pool: 68.09
2024-10-14 16:02:18,649 - root - INFO - save parameters to file: experiments/swat_test/epoch_0.params
2024-10-14 16:02:43,290 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 16:02:43,291 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 16:02:43,293 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 16:02:43,321 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 16:02:48,805 - root - INFO - epoch: 0, loss_pool: 67.15
2024-10-14 16:02:48,818 - root - INFO - save parameters to file: experiments/swat_test/epoch_0.params
2024-10-14 16:04:07,496 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 16:04:07,497 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 16:04:07,498 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 16:04:07,520 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 16:04:12,996 - root - INFO - epoch: 0, loss_pool: 67.79
2024-10-14 16:04:13,009 - root - INFO - save parameters to file: experiments/swat_test/epoch_0.params
2024-10-14 16:14:20,128 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 16:14:20,128 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 16:14:20,129 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 16:14:20,155 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 16:14:57,903 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 16:14:57,903 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 16:14:57,904 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 16:14:57,935 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 16:15:03,449 - root - INFO - epoch: 0, diffpool loss: 69.31
2024-10-14 16:15:03,462 - root - INFO - save parameters to file: experiments/swat_test/epoch_0.params
2024-10-14 16:16:37,235 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 16:16:37,236 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 16:16:37,237 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 16:16:37,259 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 16:16:42,602 - root - INFO - epoch: 0, diffpool loss: 67.85
2024-10-14 16:16:42,614 - root - INFO - save parameters to file: experiments/swat_test/epoch_0.params
2024-10-14 16:20:21,424 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 16:20:21,424 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 16:20:21,425 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 16:20:21,448 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 16:20:26,940 - root - INFO - epoch: 0, diffpool loss: 67.44
2024-10-14 16:20:26,953 - root - INFO - save parameters to file: experiments/swat_test/epoch_0.params
2024-10-14 16:23:18,820 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 16:23:18,820 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 16:23:18,821 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 16:23:18,842 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 16:25:10,025 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 16:25:10,025 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 16:25:10,026 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 16:25:10,048 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 16:25:15,478 - root - INFO - epoch: 0, diffpool loss: 68.15
2024-10-14 16:25:15,490 - root - INFO - save parameters to file: experiments/swat_test/epoch_0.params
2024-10-14 16:32:04,635 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 16:32:04,635 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 16:32:04,636 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 16:32:04,659 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 16:33:11,717 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 16:33:11,718 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 16:33:11,719 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 16:33:11,741 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 16:33:17,212 - root - INFO - epoch: 0, diffpool loss: 67.64
2024-10-14 16:33:17,225 - root - INFO - save parameters to file: experiments/swat_test/epoch_0.params
2024-10-14 16:33:53,239 - root - INFO - epoch: 0, diffpool loss: 67.76
2024-10-14 16:33:53,239 - root - INFO - epoch:0,elapsed time:41.497100591659546,total time:41.497100591659546
2024-10-14 16:33:57,315 - root - INFO - epoch: 1, diffpool loss: 60.25
2024-10-14 16:33:57,327 - root - INFO - save parameters to file: experiments/swat_test/epoch_1.params
2024-10-14 16:34:33,600 - root - INFO - epoch: 1, diffpool loss: 63.10
2024-10-14 16:34:33,600 - root - INFO - epoch:1,elapsed time:40.36086964607239,total time:81.85797023773193
2024-10-14 16:34:37,727 - root - INFO - epoch: 2, diffpool loss: 58.66
2024-10-14 16:34:37,740 - root - INFO - save parameters to file: experiments/swat_test/epoch_2.params
2024-10-14 16:35:13,883 - root - INFO - epoch: 2, diffpool loss: 62.32
2024-10-14 16:35:13,883 - root - INFO - epoch:2,elapsed time:40.283225536346436,total time:122.14119577407837
2024-10-14 16:35:17,898 - root - INFO - epoch: 3, diffpool loss: 58.19
2024-10-14 16:35:17,909 - root - INFO - save parameters to file: experiments/swat_test/epoch_3.params
2024-10-14 16:49:03,658 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 16:49:03,658 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 16:49:03,659 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 16:49:42,758 - root - INFO - train: torch.Size([4195, 51, 1, 30]), torch.Size([4195, 51, 1, 30])
2024-10-14 16:49:42,759 - root - INFO - val: torch.Size([1027, 51, 1, 30]), torch.Size([1027, 51, 1, 30])
2024-10-14 16:49:42,760 - root - INFO - 训练集文件data/SWAT/train_swat_gcn.npz
2024-10-14 16:49:42,784 - root - INFO - Grelen(
  (graph_learner): Graph_learner(
    (mlp1): MLP(
      (fc1): Linear(in_features=30, out_features=64, bias=True)
      (fc2): Linear(in_features=64, out_features=64, bias=True)
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (Wq): Linear(in_features=64, out_features=128, bias=True)
    (Wk): Linear(in_features=64, out_features=128, bias=True)
  )
  (linear1): Linear(in_features=1, out_features=64, bias=True)
  (encoder_model): ModuleList(
    (0-2): 3 x EncoderModel(
      (gcn_layers): ModuleList(
        (0): SoftPoolingGcnEncoder(
          (conv_first): GraphConv()
          (conv_block): ModuleList(
            (0): GraphConv()
          )
          (conv_last): GraphConv()
          (act): ReLU()
          (pred_model): Sequential(
            (0): Linear(in_features=384, out_features=50, bias=True)
            (1): ReLU()
            (2): Linear(in_features=50, out_features=2, bias=True)
          )
          (conv_first_after_pool): ModuleList(
            (0): GraphConv()
          )
          (conv_block_after_pool): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (conv_last_after_pool): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_first_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_conv_block_modules): ModuleList(
            (0): ModuleList(
              (0): GraphConv()
            )
          )
          (assign_conv_last_modules): ModuleList(
            (0): GraphConv()
          )
          (assign_pred_modules): ModuleList(
            (0): Linear(in_features=140, out_features=12, bias=True)
          )
        )
      )
      (projection_layer): Linear(in_features=2, out_features=3264, bias=True)
    )
  )
  (linear_out): Linear(in_features=64, out_features=1, bias=True)
  (soft_pooling_encoder): SoftPoolingGcnEncoder(
    (conv_first): GraphConv()
    (conv_block): ModuleList(
      (0): GraphConv()
    )
    (conv_last): GraphConv()
    (act): ReLU()
    (pred_model): Sequential(
      (0): Linear(in_features=384, out_features=50, bias=True)
      (1): ReLU()
      (2): Linear(in_features=50, out_features=2, bias=True)
    )
    (conv_first_after_pool): ModuleList(
      (0): GraphConv()
    )
    (conv_block_after_pool): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (conv_last_after_pool): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_first_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_conv_block_modules): ModuleList(
      (0): ModuleList(
        (0): GraphConv()
      )
    )
    (assign_conv_last_modules): ModuleList(
      (0): GraphConv()
    )
    (assign_pred_modules): ModuleList(
      (0): Linear(in_features=140, out_features=12, bias=True)
    )
  )
)
2024-10-14 16:49:48,380 - root - INFO - epoch: 0, diffpool loss: 69.41
2024-10-14 16:49:48,392 - root - INFO - save parameters to file: experiments/swat_test/epoch_0.params
2024-10-14 16:50:24,894 - root - INFO - epoch: 0, diffpool loss: 69.74
2024-10-14 16:50:24,894 - root - INFO - epoch:0,elapsed time:42.11018991470337,total time:42.11018991470337
2024-10-14 16:50:29,074 - root - INFO - epoch: 1, diffpool loss: 61.19
2024-10-14 16:50:29,087 - root - INFO - save parameters to file: experiments/swat_test/epoch_1.params
2024-10-14 16:51:08,063 - root - INFO - epoch: 1, diffpool loss: 63.38
2024-10-14 16:51:08,063 - root - INFO - epoch:1,elapsed time:43.16838526725769,total time:85.27857518196106
2024-10-14 16:51:12,926 - root - INFO - epoch: 2, diffpool loss: 58.77
2024-10-14 16:51:12,940 - root - INFO - save parameters to file: experiments/swat_test/epoch_2.params
2024-10-14 16:51:52,708 - root - INFO - epoch: 2, diffpool loss: 62.20
2024-10-14 16:51:52,708 - root - INFO - epoch:2,elapsed time:44.64537024497986,total time:129.92394542694092
2024-10-14 16:51:57,601 - root - INFO - epoch: 3, diffpool loss: 58.28
2024-10-14 16:51:57,616 - root - INFO - save parameters to file: experiments/swat_test/epoch_3.params
2024-10-14 16:52:34,416 - root - INFO - epoch: 3, diffpool loss: 61.84
2024-10-14 16:52:34,416 - root - INFO - epoch:3,elapsed time:41.70793795585632,total time:171.63188338279724
2024-10-14 16:52:38,498 - root - INFO - epoch: 4, diffpool loss: 57.84
2024-10-14 16:52:38,509 - root - INFO - save parameters to file: experiments/swat_test/epoch_4.params
2024-10-14 16:53:15,066 - root - INFO - epoch: 4, diffpool loss: 61.66
2024-10-14 16:53:15,066 - root - INFO - epoch:4,elapsed time:40.649324893951416,total time:212.28120827674866
2024-10-14 16:53:19,146 - root - INFO - epoch: 5, diffpool loss: 57.77
2024-10-14 16:53:19,158 - root - INFO - save parameters to file: experiments/swat_test/epoch_5.params
2024-10-14 16:53:55,144 - root - INFO - epoch: 5, diffpool loss: 61.55
2024-10-14 16:53:55,144 - root - INFO - epoch:5,elapsed time:40.077903270721436,total time:252.3591115474701
2024-10-14 16:53:59,186 - root - INFO - epoch: 6, diffpool loss: 58.00
2024-10-14 16:54:35,321 - root - INFO - epoch: 6, diffpool loss: 61.43
2024-10-14 16:54:35,321 - root - INFO - epoch:6,elapsed time:40.17713451385498,total time:292.5362460613251
2024-10-14 16:54:39,372 - root - INFO - epoch: 7, diffpool loss: 57.85
2024-10-14 16:55:15,482 - root - INFO - epoch: 7, diffpool loss: 61.35
2024-10-14 16:55:15,483 - root - INFO - epoch:7,elapsed time:40.1615571975708,total time:332.6978032588959
2024-10-14 16:55:19,538 - root - INFO - epoch: 8, diffpool loss: 57.98
2024-10-14 16:55:55,514 - root - INFO - epoch: 8, diffpool loss: 61.31
2024-10-14 16:55:55,514 - root - INFO - epoch:8,elapsed time:40.031049966812134,total time:372.728853225708
2024-10-14 16:55:59,592 - root - INFO - epoch: 9, diffpool loss: 58.10
2024-10-14 16:56:36,032 - root - INFO - epoch: 9, diffpool loss: 61.23
2024-10-14 16:56:36,032 - root - INFO - epoch:9,elapsed time:40.51846718788147,total time:413.2473204135895
2024-10-14 16:56:40,079 - root - INFO - epoch: 10, diffpool loss: 58.20
2024-10-14 16:57:16,166 - root - INFO - epoch: 10, diffpool loss: 61.27
2024-10-14 16:57:16,167 - root - INFO - epoch:10,elapsed time:40.134246587753296,total time:453.3815670013428
2024-10-14 16:57:20,237 - root - INFO - epoch: 11, diffpool loss: 57.67
2024-10-14 16:57:20,249 - root - INFO - save parameters to file: experiments/swat_test/epoch_11.params
2024-10-14 16:57:56,270 - root - INFO - epoch: 11, diffpool loss: 61.18
2024-10-14 16:57:56,270 - root - INFO - epoch:11,elapsed time:40.10317277908325,total time:493.484739780426
2024-10-14 16:58:00,319 - root - INFO - epoch: 12, diffpool loss: 57.64
2024-10-14 16:58:00,329 - root - INFO - save parameters to file: experiments/swat_test/epoch_12.params
2024-10-14 16:58:35,337 - root - INFO - epoch: 12, diffpool loss: 61.17
2024-10-14 16:58:35,337 - root - INFO - epoch:12,elapsed time:39.06703853607178,total time:532.5517783164978
2024-10-14 16:58:39,417 - root - INFO - epoch: 13, diffpool loss: 57.63
2024-10-14 16:58:39,427 - root - INFO - save parameters to file: experiments/swat_test/epoch_13.params
2024-10-14 16:59:11,073 - root - INFO - epoch: 13, diffpool loss: 61.12
2024-10-14 16:59:11,074 - root - INFO - epoch:13,elapsed time:35.73656249046326,total time:568.2883408069611
2024-10-14 16:59:15,143 - root - INFO - epoch: 14, diffpool loss: 57.72
2024-10-14 16:59:46,777 - root - INFO - epoch: 14, diffpool loss: 61.19
2024-10-14 16:59:46,777 - root - INFO - epoch:14,elapsed time:35.703408002853394,total time:603.9917488098145
2024-10-14 16:59:50,911 - root - INFO - epoch: 15, diffpool loss: 58.27
2024-10-14 17:00:22,766 - root - INFO - epoch: 15, diffpool loss: 61.26
2024-10-14 17:00:22,766 - root - INFO - epoch:15,elapsed time:35.98882436752319,total time:639.9805731773376
2024-10-14 17:00:26,886 - root - INFO - epoch: 16, diffpool loss: 58.27
2024-10-14 17:00:58,943 - root - INFO - epoch: 16, diffpool loss: 61.16
2024-10-14 17:00:58,943 - root - INFO - epoch:16,elapsed time:36.17726182937622,total time:676.1578350067139
2024-10-14 17:01:03,053 - root - INFO - epoch: 17, diffpool loss: 58.20
2024-10-14 17:01:34,904 - root - INFO - epoch: 17, diffpool loss: 61.09
2024-10-14 17:01:34,904 - root - INFO - epoch:17,elapsed time:35.96022129058838,total time:712.1180562973022
2024-10-14 17:01:38,982 - root - INFO - epoch: 18, diffpool loss: 58.08
2024-10-14 17:02:10,448 - root - INFO - epoch: 18, diffpool loss: 61.05
2024-10-14 17:02:10,448 - root - INFO - epoch:18,elapsed time:35.54450535774231,total time:747.6625616550446
2024-10-14 17:02:14,563 - root - INFO - epoch: 19, diffpool loss: 57.95
2024-10-14 17:02:46,215 - root - INFO - epoch: 19, diffpool loss: 61.03
2024-10-14 17:02:46,215 - root - INFO - epoch:19,elapsed time:35.766727685928345,total time:783.4292893409729
2024-10-14 17:02:50,305 - root - INFO - epoch: 20, diffpool loss: 58.27
2024-10-14 17:03:22,135 - root - INFO - epoch: 20, diffpool loss: 61.03
2024-10-14 17:03:22,136 - root - INFO - epoch:20,elapsed time:35.92032217979431,total time:819.3496115207672
2024-10-14 17:03:26,255 - root - INFO - epoch: 21, diffpool loss: 58.09
2024-10-14 17:03:58,023 - root - INFO - epoch: 21, diffpool loss: 60.98
2024-10-14 17:03:58,023 - root - INFO - epoch:21,elapsed time:35.8875617980957,total time:855.2371733188629
2024-10-14 17:04:02,130 - root - INFO - epoch: 22, diffpool loss: 58.09
2024-10-14 17:04:33,758 - root - INFO - epoch: 22, diffpool loss: 60.96
2024-10-14 17:04:33,758 - root - INFO - epoch:22,elapsed time:35.73452687263489,total time:890.9717001914978
2024-10-14 17:04:37,833 - root - INFO - epoch: 23, diffpool loss: 58.03
2024-10-14 17:05:09,353 - root - INFO - epoch: 23, diffpool loss: 60.94
2024-10-14 17:05:09,353 - root - INFO - epoch:23,elapsed time:35.59544396400452,total time:926.5671441555023
2024-10-14 17:05:13,447 - root - INFO - epoch: 24, diffpool loss: 57.95
2024-10-14 17:05:44,827 - root - INFO - epoch: 24, diffpool loss: 60.93
2024-10-14 17:05:44,827 - root - INFO - epoch:24,elapsed time:35.473747968673706,total time:962.040892124176
2024-10-14 17:05:48,913 - root - INFO - epoch: 25, diffpool loss: 57.85
2024-10-14 17:06:20,444 - root - INFO - epoch: 25, diffpool loss: 60.91
2024-10-14 17:06:20,445 - root - INFO - epoch:25,elapsed time:35.6171350479126,total time:997.6580271720886
2024-10-14 17:06:24,552 - root - INFO - epoch: 26, diffpool loss: 58.01
2024-10-14 17:06:55,753 - root - INFO - epoch: 26, diffpool loss: 60.89
2024-10-14 17:06:55,753 - root - INFO - epoch:26,elapsed time:35.30840849876404,total time:1032.9664356708527
2024-10-14 17:06:59,821 - root - INFO - epoch: 27, diffpool loss: 57.99
2024-10-14 17:07:31,197 - root - INFO - epoch: 27, diffpool loss: 60.89
2024-10-14 17:07:31,197 - root - INFO - epoch:27,elapsed time:35.44427132606506,total time:1068.4107069969177
2024-10-14 17:07:35,290 - root - INFO - epoch: 28, diffpool loss: 58.11
2024-10-14 17:08:06,673 - root - INFO - epoch: 28, diffpool loss: 60.89
2024-10-14 17:08:06,673 - root - INFO - epoch:28,elapsed time:35.47575759887695,total time:1103.8864645957947
2024-10-14 17:08:10,753 - root - INFO - epoch: 29, diffpool loss: 57.86
2024-10-14 17:08:42,259 - root - INFO - epoch: 29, diffpool loss: 60.87
2024-10-14 17:08:42,259 - root - INFO - epoch:29,elapsed time:35.586023569107056,total time:1139.4724881649017
2024-10-14 17:08:46,354 - root - INFO - epoch: 30, diffpool loss: 57.80
2024-10-14 17:09:18,195 - root - INFO - epoch: 30, diffpool loss: 60.84
2024-10-14 17:09:18,195 - root - INFO - epoch:30,elapsed time:35.935431241989136,total time:1175.4079194068909
2024-10-14 17:09:22,310 - root - INFO - epoch: 31, diffpool loss: 58.15
